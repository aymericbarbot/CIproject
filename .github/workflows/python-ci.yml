name: CI Workflow

on:
  push:
    branches:
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest

  handle-success-or-failure:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      
      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Handle success
        if: success()
        run: |
          git fetch origin
          git rebase origin/main
          git checkout main
          git merge --ff-only origin/dev
          git push https://x-access-token:${{ secrets.PAT_COURCI }}@github.com/LouisBrousse/courCI.git main

      - name: Handle failure – reset and branch off
        if: failure()
        run: |
          git fetch origin
          git checkout dev
          TIMESTAMP=$(date +%s)

          # Sauvegarder le commit fautif
          BAD_COMMIT=$(git rev-parse origin/dev)

          # Revenir à l'avant-dernier commit (1 commit avant le dernier sur dev)
          git reset --hard HEAD~1

          # Pousser la correction sur dev
          git push https://x-access-token:${{ secrets.PAT_COURCI }}@github.com/LouisBrousse/courCI.git dev --force

          # Créer une branche pour le commit fautif
          git checkout -b failures/$TIMESTAMP $BAD_COMMIT
          git push https://x-access-token:${{ secrets.PAT_COURCI }}@github.com/LouisBrousse/courCI.git failures/$TIMESTAMP